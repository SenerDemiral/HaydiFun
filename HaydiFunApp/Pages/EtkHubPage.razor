@page "/etkhub"
@using System.Text;

@inject NavigationManager NavigationManager
@inject IPubs pubs
@inject EtkHub EtkHub
@inject UsrHub UsrHub
@inject IDialogService DialogService

@implements IDisposable

<style>

    .G {
        background-color: aliceblue;
    }

    .O {
        background-color: palegoldenrod;
        /*color: whitesmoke;*/
    }

    .box {
        background-color: orange;
        color: black;
        border-radius: 5px;
        padding: 20px;
        font-size: 100%;
    }
    img {
        border-radius: 50%;
    }
    .wrapper {
        display: grid;
        align-items: center;
        grid-gap: 4px;
        grid-template-columns: 1fr 50px 50px 50px 50px;
        /*grid-auto-rows: 1fr;*/
        grid-template-rows: 52px 26px 80px 26px 26px;
        grid-template-areas:
            "IDE  MBRE OWNA STU  CHAT"
            "OWN  OWN  OWN  ...  ..."
            "INF  INF  INF  INF  INF"
            "LBLS LBLS LBLS LBLS LBLS"
            "MBRS MBRS MBRS MBRS MBRS";
        /*background-color: white;*/
        /*color: #444;*/
        /*padding: 4px;*/
        margin: 0 12px 0 0;
        box-shadow: 4px 4px 8px grey;
        /*box-shadow: inset 10px 10px 36px 20px #9b9b9b;*/
    }

    .main {
        max-height: 90vh;
        overflow: auto;
        display: flex;
        flex-direction: column;
        row-gap: 20px;
    }

    @@media only screen and (width > 500px) { /* Level4 */
        .main {
            max-width: 50vw;
            margin: auto;
        }
    }


    .IDE {
        grid-area: IDE;
        /*cursor: pointer;*/
        padding: 0 4px;
        font-weight: 800;
        font-size: medium;
    }

    .MBRE {
        grid-area: MBRE;
        cursor: pointer;
        font-size: x-large;
    }

    .OWN {
        grid-area: OWN;
        padding: 0 4px;
    }

    .OWNA {
        grid-area: OWNA;
        /*font-size: x-large;*/
        cursor: pointer;
    }

    .STU {
        grid-area: STU;
        font-size: x-large;
        text-align: center;
        cursor: pointer;
    }

    .CHAT {
        grid-area: CHAT;
        font-size: x-large;
        text-align: center;
        cursor: pointer;
    }

    .INF {
        grid-area: INF;
        padding: 0 4px;
        /*background-color: aqua !important;*/
    }

    .INFA {
        grid-area: INFA;
    }

    .LBLS {
        grid-area: LBLS;
        /*padding: 0 4px;*/
        overflow-x: auto;
        white-space: nowrap;
        margin: 0 8px;
    }

    .MBRS {
        grid-area: MBRS;
        /*padding: 0 4px;*/
        text-align: right;
        overflow-x: auto;
        white-space: nowrap;
        margin: 0 8px;
    }



    div[data-ide] {
        /*text-decoration: line-through solid red 2px;*/
        /*background-color: olive;*/
        /*color: white;*/
    }

        div[data-ide]::after {
            content: " 🚧";
            cursor: pointer;
        }


    div[data-mbr]::before {
        content: "🧑‍🤝‍🧑";
    }

    .txta {
        /*box-shadow: rgba(14, 30, 37, 0.12) 0px 2px 4px 0px, rgba(14, 30, 37, 0.32) 0px 2px 16px 0px;*/
        /*box-shadow: rgba(0, 0, 0, 0.45) 0px 25px 20px -20px;*/
        /*box-shadow: 4px 4px 8px grey;*/
        box-shadow: inset 10px 10px 36px 10px lightgray;
        /*background-color: inherit;*/
        padding: 4px;
        width: 100%;
        height: 80px;
        font-weight: bold;
        resize: vertical;
        /*color: inherit;*/
        /*scrollbar-color: whitesmoke transparent;*/
        /*border-left-width:4px;*/
        /*border-style:groove;*/
        /*border-color:brown;*/
        border: 1px solid;
    }

</style>


@if (USP.UsrId != 0)
{
    <div class="main">
        @{
            int NOU = 0;
            var usrId = USP.UsrId;
            EtkHub.EtkMdl etk;
        }
        @foreach (var e in EtkL)
        {
            var o = UsrHub.UsrD[e.OwnId];
            var oOnline = Cnst.emjOnlineStu(o.isOnline);
            var hasChat = Cnst.emjChatStu(e.hasChat);
            var usrStu = Cnst.emjUsrStu(e.MbrD[usrId]);

            <div class="wrapper @e.Typ">
                <div class="IDE" data-ide="@e.isOwnr" @onclick="(()=> EditEtk(e))">@e.ETid</div>
                <div class="MBRE emj" data-mbr="@e.isOwnr" @onclick="(()=> EditMbr(e))"></div>
                @*<div class="emj">@e.TypAd</div>*@
                <div class="OWN">@o.Usr @oOnline</div>
                <div class="OWNA" @onclick="(()=> UsrInfo(o.UTid))"><img src="@o.ImgUrl" /></div>
                <div class="STU" @onclick="(()=> StuChange(e))">@usrStu</div>
                <div class="CHAT" @onclick="(()=> GoChat(e.ETid))">@hasChat</div>
                <div class="INF">
                    <textarea rows="@e.InfoNOL" disabled class="txta">@e.Info</textarea>
                </div>
                <div class="MBRS">@e.OnlineMbrs</div>
                <div class="LBLS">@e.LblAds</div>

            </div>
        }
    </div>
}

@code {
    [CascadingParameter] private UserStateProvider USP { get; set; }
    Dictionary<int, DateTime> ETD = new();
    List<EtkHub.EtkMdl> EtkL = new();

    public async Task UsrInfo(int utId)
    {
        var prms = new DialogParameters { ["UTid"] = utId };

        var dialog = DialogService.Show<UsrInfoDialog>("Üye", prms);
        var result = await dialog.Result;
    }

    private async Task EditMbr(EtkHub.EtkMdl itm)
    {
        if (USP.UsrId == itm.OwnId) // Ownr
        {
            var prms = new DialogParameters { ["ETid"] = itm.ETid };

            var dialog = DialogService.Show<EtkMbrDialog>($"Davetliler {itm.TypAd} #{itm.ETid}", prms);
            var result = await dialog.Result;
        }
    }

    private async Task EditEtk()
    {
        var prms = new DialogParameters { ["ETid"] = 0 };

        var dialog = DialogService.Show<EtkMdfDialog>($"Yeni Etkinlik", prms);
        var result = await dialog.Result;
    }

    private async Task EditEtk(EtkHub.EtkMdl itm)
    {
        if (USP.UsrId == itm.OwnId) // Ownr
        {
            var prms = new DialogParameters { ["ETid"] = itm.ETid };

            var dialog = DialogService.Show<EtkMdfDialog>($"Düzenle {itm.TypAd} #{itm.ETid}", prms);
            var result = await dialog.Result;
        }
    }

    private void GoChat(int etId)
    {
        if (EtkHub.IsUsrEtkMember(etId, USP.UsrId))
        {
            char usrEtkStu = EtkHub.EtkD[etId].MbrD[USP.UsrId];
            if (Cnst.CanChat(usrEtkStu))
                NavigationManager.NavigateTo($"chathub/{etId}");
        }
    }

    private void StuChange(EtkHub.EtkMdl itm)
    {
        if (itm.UsrId != USP.UsrId)
        {
            var ok = EtkHub.ToggleEtkUsrStu(itm.ETid, USP.UsrId);
            if (!ok)
            {
                // uyari ver
            }
        }
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        //if (parameters.TryGetValue<UserStateProvider>(nameof(USP), out var value))
        //{
        //  if (value is null || value.UsrTyp != "A")
        //    NavigationManager.NavigateTo("");
        //  else
        //    await base.SetParametersAsync(parameters);  //Diger LifeCyle metodlarini cagiriyor
        //}


        await base.SetParametersAsync(parameters);  //Diger LifeCyle metodlarini cagiriyor
    }

    protected override void OnParametersSet()
    {
        EtkL = EtkHub.GetUsrEtks(USP.UsrId);
        foreach (var itm in EtkL)
        {
            itm.isOwnr = itm.OwnId == USP.UsrId ? true : false;
        }
    }

    protected override void OnInitialized()
    {
        // Subscribe olmaya gerek yok.
        // UsrHub.UsrD degistiginde USP(parent) degistigi icin burayi refresh ediyor (OnParameterSet)
        // https://learn.microsoft.com/en-us/aspnet/core/blazor/components/lifecycle?view=aspnetcore-6.0#after-parameters-are-set-onparameterssetasync

        //pubs.Subscribe(Constants.UsrChangeEvnt, OnUsrChange);

        // Igili Etkinlik degisimlerini dinlemek gerek cunki USP yi etkilemiyor

        pubs.Subscribe(Cnst.EtkChangeEvnt, EtkChangeHandler);
    }

    public void EtkChangeHandler(dynamic d)
    {
        int etId = d.ETid;
        if (EtkHub.IsUsrEtkMember(etId, USP.UsrId))
        {
            EtkL = EtkHub.GetUsrEtks(USP.UsrId);
            InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose()
    {
        pubs.UnSubscribe(Cnst.EtkChangeEvnt, EtkChangeHandler);
    }

}
