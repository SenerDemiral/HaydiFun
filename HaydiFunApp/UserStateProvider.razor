@inject ProtectedLocalStorage PLS
@inject UsrHub UsrHub
@inject DataHub DataHub
@inject IPubs pubs
@inject IDataAccess db
@inject NavigationManager NavigationManager
@implements IDisposable

@if (isLoaded)
{
    <CascadingValue Value="@this">
        @ChildContent
    </CascadingValue>
}
else
{
    <p>Loading...</p>
}

@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    private bool isLoaded;

    public int UsrId = 0;
    public string? Usr = "?";
    public string? UsrTyp = "?";
    public string? UsrAvatar;
    public int NOU = 0;

    private void GoHome()
    {
        switch (UsrTyp)
        {
            default: NavigationManager.NavigateTo("/"); break;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var toto = await PLS.GetAsync<int>(Constants.BrowserUsrIdKey);
            if (toto.Success)
                UsrId = toto.Value;
        }
        catch (Exception)
        {
            UsrId = 0;
            await PLS.SetAsync(Constants.BrowserUsrIdKey, UsrId);
        }
        finally
        {
            pubs.AddDynEvent(Constants.UsrCntChange, UsrCntChange);

            NOU = UsrHub.UsrCnt();

            if (UsrId != 0)
            {
                //var rtrn = await db.StoreProcAsync<dynamic, dynamic>("Usr_Enter(@UTid)", new { UTid = UTid });
                var rtrn = await db.StoreProcAsync<dynamic, dynamic>("Usr_Login(@UTid, @UsrPwd)", new { UTid = UsrId.ToString(), UsrPwd = "c~@~n" });

                if (rtrn.STU == "A")  // A degilse ne yapilacak??
                {
                    UsrId = rtrn.UTID;
                    UsrTyp = rtrn.TYP;
                    Usr = rtrn.USR;
                    UsrAvatar = rtrn.AVATAR;

                    //UsrHub.UsrAdd(UsrId, Usr, UsrAvatar);
                    UsrHub.UsrEnter(UsrId);
                    //GoHome(); Ozellikle yok

                    pubs.AddDynEvent($"UT:{UsrId}", UsrPostBox);
                }
            }
            isLoaded = true;

        }
    }
    private void UsrPostBox(dynamic prms)
    {
    }
    private void UsrCntChange(dynamic prms)
    {
        NOU = prms.NOU;
        InvokeAsync(StateHasChanged);
    }

    
    public async Task Logout()
    {
        UsrHub.UsrExit(UsrId);

        pubs.RemoveDynEvent($"UT:{UsrId}", UsrPostBox);


        db.StoreProc<dynamic, dynamic>("Usr_Logout(@UTid)", new { UTid = UsrId });
        UsrId = 0;
        UsrTyp = "?";
        Usr = "";
        UsrAvatar = "";
        await PLS.SetAsync(Constants.BrowserUsrIdKey, UsrId);
        //NavigationManager.NavigateTo("");

        GoHome();
        StateHasChanged();
    }

    public async Task LoginOk(int usrId, string usrTyp, string usr, string avatar)
    {
        UsrId = usrId;
        UsrTyp = usrTyp;
        Usr = usr;
        UsrAvatar = avatar;
        await PLS.SetAsync(Constants.BrowserUsrIdKey, UsrId);
        //OnUsrChanged();

        pubs.AddDynEvent($"UT:{UsrId}", UsrPostBox);

        //UsrHub.UsrAdd(UsrId, Usr, UsrAvatar);
        UsrHub.UsrEnter(UsrId);
        GoHome();
        //StateHasChanged();
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        pubs.RemoveDynEvent(Constants.UsrCntChange, UsrCntChange);
        pubs.RemoveDynEvent($"UT:{UsrId}", UsrPostBox);

        UsrHub.UsrExit(UsrId);
    }

}
