@page "/etkhub"
@using System.Text;

@inject NavigationManager NavigationManager
@inject IPubs pubs
@inject EtkHub EtkHub
@inject UsrHub UsrHub
@inject IDialogService DialogService

@implements IDisposable

<style>
    .ug {
        display: grid;
        grid-gap: 4px;
        grid-template-columns: 100px 50px 200px;
        background-color: burlywood;
        /*color: #444;*/
        justify-content: center;
        align-content: center;
        /*height: 100px;*/
        /*overflow: auto;*/
    }

    .G {
        background-color: aliceblue;
    }

    .O {
        background-color: bisque;
    }

    .tal {
        text-align: left;
    }

    .emoji {
        font-size: large;
        cursor: pointer;
    }

    .lbl, .mbr {
        font-size: x-small;
    }

    .imj {
        display: block;
    }

    .tac {
        text-align: center;
    }

    .tar {
        text-align: right;
    }

    table, th, td {
        /*border: 1px solid burlywood;*/
        /*border-collapse: collapse;*/
        padding: 0 4px;
    }
</style>

<MudFab StartIcon="@Icons.Material.Filled.Login"
        Label="Yeni"
        Color="Color.Error"
        Size="Size.Small"
        OnClick="@(() => DialogService.Show<EtkMdfDialog>())" />

@if (USP.UsrId != 0)
{
    <div style="margin:auto; width: fit-content; max-height:80vh; overflow:auto">
        <table>
            <caption style="background-color: burlywood;">Etkinliklerim</caption>
            <colgroup>
                <col>
                <col>
                <col>
                <col style="width:50px">
                <col>
            </colgroup>
            <thead>
                <tr>
                    <th class="tal">ID</th>
                    <th>Typ</th>
                    <th>Owner</th>
                    <th>Avtr</th>
                    <th>Stu</th>
                </tr>
            </thead>
            <tbody>
                @{
                    int NOU = 0;
                    var usrId = USP.UsrId;
                    EtkHub.EtkMdl etk;
                }
                @foreach (var e in EtkL)
                {
                    var o = UsrHub.UsrD[e.OwnId];
                    var oOnline = Cnst.emjOnlineStu(o.isOnline);
                    var hasChat = Cnst.emjChatStu(e.hasChat);
                    var usrStu = Cnst.emjUsrStu(e.MbrD[usrId]);

                    <tr @key="e.ETid" class="@e.Typ">
                        <td class="emoji" @onclick="(()=> EditMbr(e.ETid))">@e.ETid</td>
                        <td class="tac emoji">@e.TypAd</td>
                        <td><b>@o.Usr</b> @oOnline</td>
                        <td class="px-0"><img src="@o.ImgUrl" class="imj" /></td>
                        <td class="tac emoji" @onclick="(()=> StuChange(e.ETid))">@usrStu</td>
                        <td class="emoji" @onclick="(()=> GoChat(e.ETid))">@hasChat</td>
                    </tr>
                    <tr style="background-color: beige">
                        <td colspan="9" class="info">@e.Info</td>
                    </tr>
                    <tr style="background-color: beige">
                        <td colspan="9" class="lbl">@e.LblAds</td>
                    </tr>
                    @if (e.Typ == 'G')
                    {
                        <tr style="background-color: beige">
                            <td colspan="9" class="mbr">@Cnst.emjOnline @e.OnlineMbrs</td>
                        </tr>
                    }
                    else
                    {
                        <tr style="background-color: beige">
                            <td colspan="9" class="mbr">@e.MbrAds</td>
                        </tr>
                    }
                    <br />

                    NOU++;
                }

            </tbody>
            <tfoot style="background-color: burlywood;">
                <tr>
                    <td class="tac">@NOU</td>
                    <td colspan="9"></td>
                </tr>
            </tfoot>
        </table>
    </div>
}


@code {
    [CascadingParameter] private UserStateProvider USP { get; set; }
    Dictionary<int, DateTime> ETD = new();
    List<EtkHub.EtkMdl> EtkL = new();

    private async Task EditMbr(int etId)
    {
        var prms = new DialogParameters { ["ETid"] = etId };

        var dialog = DialogService.Show<EtkMbrDialog>("baslik", prms);
        var result = await dialog.Result;
    }

    private void GoChat(int etId)
    {
        if (EtkHub.IsUsrEtkMember(etId, USP.UsrId))
        {
            char usrEtkStu = EtkHub.EtkD[etId].MbrD[USP.UsrId];
            if (Cnst.CanChat(usrEtkStu))
                NavigationManager.NavigateTo($"chathub/{etId}");
        }
    }

    private void StuChange(int etId)
    {
        var ok = EtkHub.ToggleEtkUsrStu(etId, USP.UsrId);
        if (!ok)
        {
            // uyari ver
        }
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        //if (parameters.TryGetValue<UserStateProvider>(nameof(USP), out var value))
        //{
        //  if (value is null || value.UsrTyp != "A")
        //    NavigationManager.NavigateTo("");
        //  else
        //    await base.SetParametersAsync(parameters);  //Diger LifeCyle metodlarini cagiriyor
        //}


        await base.SetParametersAsync(parameters);  //Diger LifeCyle metodlarini cagiriyor
    }

    protected override void OnParametersSet()
    {
        EtkL = EtkHub.GetUsrEtks(USP.UsrId);
    }

    protected override void OnInitialized()
    {
        // Subscribe olmaya gerek yok.
        // UsrHub.UsrD degistiginde USP(parent) degistigi icin burayi refresh ediyor (OnParameterSet)
        // https://learn.microsoft.com/en-us/aspnet/core/blazor/components/lifecycle?view=aspnetcore-6.0#after-parameters-are-set-onparameterssetasync

        //pubs.Subscribe(Constants.UsrChangeEvnt, OnUsrChange);

        // Igili Etkinlik degisimlerini dinlemek gerek cunki USP yi etkilemiyor

        pubs.Subscribe(Cnst.EtkChangeEvnt, EtkChangeHandler);
    }

    public void EtkChangeHandler(dynamic d)
    {
        int etId = d.ETid;
        if (EtkHub.IsUsrEtkMember(etId, USP.UsrId))
        {
            EtkL = EtkHub.GetUsrEtks(USP.UsrId);
            InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose()
    {
        pubs.UnSubscribe(Cnst.EtkChangeEvnt, EtkChangeHandler);
    }

}
