@page "/etkhub"
@using System.Text;

@inject NavigationManager NavigationManager
@inject IPubs pubs
@inject EtkHub EtkHub
@inject UsrHub UsrHub
@inject IDialogService DialogService

@implements IDisposable

<style>
    
    .G {
        background-color: aliceblue;
    }

    .O {
        background-color: bisque;
    }

    td[data-edt] {
        /*text-decoration: line-through solid red 2px;*/
        background-color: olive;
        color: white;
        cursor: pointer;
        width: 5em;
    }

    td[data-mbr]::before {
        content: "🧑‍🤝‍🧑";
    }

    .edt {
        font-size: large;
        background-color: olive;
        color: white;
        cursor: pointer;
        width: 5em;
    }

        .edt::before {
            content: "🚧";
        }

    .lbl, .mbr {
        font-size: x-small;
        max-width: 50vw;
    }


    .info {
        font-weight: bold;
        max-width: 50vw;
    }

    table, th, td {
        /*border: 1px solid burlywood;*/
        /*border-collapse: collapse;*/
        padding: 0 4px;
    }
</style>


@if (USP.UsrId != 0)
{
    <div style="max-height:90vh; overflow:auto; display: grid; grid-template-columns:minmax(min-content,0.6fr); justify-content: center;">
        <table style="background-color: snow">
            @*<caption style="background-color: burlywood;">Etkinliklerim <span class="emj cp" @onclick="@(() => DialogService.Show<EtkMdfDialog>())">➕</span></caption>*@
            <caption style="background-color: burlywood;">Etkinliklerim <span class="emj cp" @onclick="(()=> EditEtk())">➕</span></caption>
            <colgroup>
                <col style="width:fit-content">
                <col>
                <col>
                <col style="width:50px">
                <col>
                <col>
            </colgroup>
            <thead>
                <tr>
                    <th>ID</th>
                    <th></th>
                    <th>Typ</th>
                    <th>Owner</th>
                    <th>Avtr</th>
                    <th>Stu</th>
                </tr>
            </thead>
            <tbody>
                @{
                    int NOU = 0;
                    var usrId = USP.UsrId;
                    EtkHub.EtkMdl etk;
                }
                @foreach (var e in EtkL)
                {
                    var o = UsrHub.UsrD[e.OwnId];
                    var oOnline = Cnst.emjOnlineStu(o.isOnline);
                    var hasChat = Cnst.emjChatStu(e.hasChat);
                    var usrStu = Cnst.emjUsrStu(e.MbrD[usrId]);

                    <tr @key="e.ETid" class="@e.Typ">
                        <td data-edt="@e.isOwnr" @onclick="(()=> EditEtk(e))">@e.ETid</td>
                        <td data-mbr="@e.isOwnr" class="emj cp" @onclick="(()=> EditMbr(e))"></td>
                        <td class="emj">@e.TypAd</td>
                        <td><b>@o.Usr</b>@oOnline</td>
                        <td class="px-0" @onclick="(()=> UsrInfo(o.UTid))"><img src="@o.ImgUrl" class="imj cp" /></td>

                        <td class="emj cp" @onclick="(()=> StuChange(e))">@usrStu</td>
                        <td class="emj cp" @onclick="(()=> GoChat(e.ETid))">@hasChat</td>
                    </tr>
                    <tr style="background-color: beige">
                        @*<td colspan="9" class="info">@e.Info</td>*@
                        <td colspan="9" ><textarea rows="2" disabled style="width:100%;font-weight:bold; ">@e.Info</textarea></td>
                    </tr>
                    <tr style="background-color: beige">
                        <td colspan="9" class="lbl">@e.LblAds</td>
                    </tr>
                    @if (e.Typ == 'G')
                    {
                        <tr style="background-color: beige">
                            <td colspan="9" class="mbr">@Cnst.emjOnline @e.OnlineMbrs</td>
                        </tr>
                    }
                    else
                    {
                        <tr style="background-color: beige">
                            <td colspan="9" class="mbr">@e.MbrAds</td>
                        </tr>
                    }
                    <br />

                    NOU++;
                }

            </tbody>
            <tfoot style="background-color: burlywood;">
                <tr>
                    <td class="tac">@NOU</td>
                    <td colspan="9"></td>
                </tr>
            </tfoot>
        </table>
    </div>
}

@code {
    [CascadingParameter] private UserStateProvider USP { get; set; }
    Dictionary<int, DateTime> ETD = new();
    List<EtkHub.EtkMdl> EtkL = new();

    public async Task UsrInfo(int utId)
    {
        var prms = new DialogParameters { ["UTid"] = utId };

        var dialog = DialogService.Show<UsrInfoDialog>("Üye", prms);
        var result = await dialog.Result;
    }

    private async Task EditMbr(EtkHub.EtkMdl itm)
    {
        if (USP.UsrId == itm.OwnId) // Ownr
        {
            var prms = new DialogParameters { ["ETid"] = itm.ETid };

            var dialog = DialogService.Show<EtkMbrDialog>($"Davetliler {itm.TypAd} #{itm.ETid}", prms);
            var result = await dialog.Result;
        }
    }

    private async Task EditEtk()
    {
        var prms = new DialogParameters { ["ETid"] = 0 };

        var dialog = DialogService.Show<EtkMdfDialog>($"Yeni Etkinlik", prms);
        var result = await dialog.Result;
    }

    private async Task EditEtk(EtkHub.EtkMdl itm)
    {
        if (USP.UsrId == itm.OwnId) // Ownr
        {
            var prms = new DialogParameters { ["ETid"] = itm.ETid };

            var dialog = DialogService.Show<EtkMdfDialog>($"Düzenle {itm.TypAd} #{itm.ETid}", prms);
            var result = await dialog.Result;
        }
    }

    private void GoChat(int etId)
    {
        if (EtkHub.IsUsrEtkMember(etId, USP.UsrId))
        {
            char usrEtkStu = EtkHub.EtkD[etId].MbrD[USP.UsrId];
            if (Cnst.CanChat(usrEtkStu))
                NavigationManager.NavigateTo($"chathub/{etId}");
        }
    }

    private void StuChange(EtkHub.EtkMdl itm)
    {
        if (itm.UsrId != USP.UsrId)
        {
            var ok = EtkHub.ToggleEtkUsrStu(itm.ETid, USP.UsrId);
            if (!ok)
            {
                // uyari ver
            }
        }
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        //if (parameters.TryGetValue<UserStateProvider>(nameof(USP), out var value))
        //{
        //  if (value is null || value.UsrTyp != "A")
        //    NavigationManager.NavigateTo("");
        //  else
        //    await base.SetParametersAsync(parameters);  //Diger LifeCyle metodlarini cagiriyor
        //}


        await base.SetParametersAsync(parameters);  //Diger LifeCyle metodlarini cagiriyor
    }

    protected override void OnParametersSet()
    {
        EtkL = EtkHub.GetUsrEtks(USP.UsrId);
        foreach (var itm in EtkL)
        {
            if (itm.OwnId == USP.UsrId)
                itm.isOwnr = true;
        }
    }

    protected override void OnInitialized()
    {
        // Subscribe olmaya gerek yok.
        // UsrHub.UsrD degistiginde USP(parent) degistigi icin burayi refresh ediyor (OnParameterSet)
        // https://learn.microsoft.com/en-us/aspnet/core/blazor/components/lifecycle?view=aspnetcore-6.0#after-parameters-are-set-onparameterssetasync

        //pubs.Subscribe(Constants.UsrChangeEvnt, OnUsrChange);

        // Igili Etkinlik degisimlerini dinlemek gerek cunki USP yi etkilemiyor

        pubs.Subscribe(Cnst.EtkChangeEvnt, EtkChangeHandler);
    }

    public void EtkChangeHandler(dynamic d)
    {
        int etId = d.ETid;
        if (EtkHub.IsUsrEtkMember(etId, USP.UsrId))
        {
            EtkL = EtkHub.GetUsrEtks(USP.UsrId);
            InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose()
    {
        pubs.UnSubscribe(Cnst.EtkChangeEvnt, EtkChangeHandler);
    }

}
