@using System.ComponentModel.DataAnnotations
@inject ISnackbar Snackbar
@inject IDataAccess db
@inject EtkHub EtkHub

<MudDialog>
    <DialogContent>
        <MudTextField Label="Açıklama" AutoFocus="true" Lines="2" Style="width:300px"
                      HelperText="Açıklama"
                      @bind-Value="model.Info"
                      For="@(() => model.Info)" />
        <MudRadioGroup @bind-SelectedOption="model.isOzl" Style="margin-left:6px">
            <MudRadio Option="true" Color="Color.Secondary" Dense="true">Özel</MudRadio>
            <MudRadio Option="false" Color="Color.Success" Dense="true">Genel</MudRadio>
        </MudRadioGroup>
        <div>Davet özelliklerini seçin:</div>

        <div style="max-height: 30vh; overflow:auto">
            <LblHubComp @ref="LHC" Typ="E" osLblTxt="@Lbls"></LblHubComp>
        </div>

    </DialogContent>
    <DialogActions>
        <MudButton ButtonType="ButtonType.Submit"
                   Variant="Variant.Filled"
                   Color="Color.Primary"
                   Class="ml-auto"
                   OnClick="OnValidSubmit">
            Kaydet
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] private UserStateProvider? USP { get; set; }
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }
    [Parameter] public int ETid { get; set; } = 0;
    public bool success { get; set; } = false;
    //TagSearchDialog? TSG;
    LblHubComp? LHC;
    private RegisterModel model { get; set; } = new();
    private string Lbls = "";

    protected override void OnParametersSet()
    {
        if (ETid != 0)
        {
            model.ETid = ETid;
            model.Info = EtkHub.EtkD[ETid].Info;
            model.Typ = EtkHub.EtkD[ETid].Typ;
            Lbls = EtkHub.EtkD[ETid].Lbls;
        }
    }

    private async Task OnValidSubmit()
    {
        if (string.IsNullOrWhiteSpace(model.Info))
        {
            Snackbar.Add("Açıklama girin", Severity.Error);
            return;
        }

        model.ETid = ETid;  // 0 insert else update
        model.OwnId = USP.UsrId;
        if (LHC?.osLblL.Count > 0)
            model.Lbls = string.Join(',', LHC.osLblL.Select(x => x.LTid));

        var rtrn = await db.StoreProcAsync<dynamic, RegisterModel>("ET_MDF(@ETid, @OwnId, @Typ, @Info, @Lbls)", model);

        int rETid = rtrn.RETID;
        string Msj = rtrn.MSJ;
        EtkHub.RefreshEtk(rETid);
        MudDialog?.Close(DialogResult.Ok(true));
        //if (rsp == 0)
        //{
        //    Snackbar.Add("OK", Severity.Success, config =>
        //        {
        //            config.RequireInteraction = true;
        //            config.ShowCloseIcon = true;
        //        });

        //    MudDialog?.Close(DialogResult.Ok(true));
        //}
        //else
        //{
        //    Snackbar.Add("HATA", Severity.Warning);
        //}
    }

    private void Cancel()
    {
        Snackbar.Add("İşlem iptal edildi", Severity.Warning);
        MudDialog?.Cancel();
    }

    private class RegisterModel
    {
        public int ETid { get; set; }
        public int OwnId { get; set; }

        public char Typ { get; set; } = 'O';

        public bool isOzl
        {
            get { return Typ == 'O' ? true : false; }
            set { Typ = value ? 'O' : 'G'; }
        }

        [Required(ErrorMessage = "Bu alan zorunludur.")]
        [StringLength(250, MinimumLength = 10, ErrorMessage = "En az {2} en fazla {1} karakter.")]
        public string? Info { get; set; }
        public string? Lbls { get; set; }

    }
}