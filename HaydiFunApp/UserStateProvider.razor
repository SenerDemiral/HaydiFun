@inject ProtectedLocalStorage PLS
@inject UsrHub UsrHub
@inject DataHub DataHub
@inject IDataAccess db
@inject NavigationManager NavigationManager
@implements IDisposable

@if (isLoaded)
{
  <CascadingValue Value="@this">
    @ChildContent
  </CascadingValue>
}
else
{
  <p>Loading...</p>
}

@code {
  [Parameter]
  public RenderFragment? ChildContent { get; set; }

  private bool isLoaded;

  public int UsrId = 0;
  public string? Usr = "?";
  public string? UsrTyp = "?";
  public string? UsrAvatar;

  protected override async Task OnInitializedAsync()
  {
    try
    {
      var toto = await PLS.GetAsync<int>(Constants.BrowserUsrIdKey);
      if (toto.Success)
        UsrId = toto.Value;
    }
    catch (Exception)
    {
      UsrId = 0;
      await PLS.SetAsync(Constants.BrowserUsrIdKey, UsrId);
    }
    finally
    {
      if (UsrId != 0)
      {
        //var rtrn = await db.StoreProcAsync<dynamic, dynamic>("Usr_Enter(@UsrId)", new { UsrId = UsrId });
        var rtrn = await db.StoreProcAsync<dynamic, dynamic>("Usr_Login(@UsrId, @UsrPwd)", new { UsrId = UsrId.ToString(), UsrPwd = "c~@~n" });

        if (rtrn.STU == "A")
        {
          UsrId = rtrn.UTID;
          UsrTyp = rtrn.TYP;
          Usr = rtrn.USR;
          UsrAvatar = rtrn.AVATAR;

          UsrHub.UsrAdd(UsrId, Usr, UsrAvatar);
          //GoHome(); Ozellikle yok
        }
      }
      isLoaded = true;
    }
  }

  private void GoHome()
  {
    switch (UsrTyp)
    {
      default: NavigationManager.NavigateTo("/"); break;
    }
  }

  public async Task Logout()
  {
    UsrHub.UsrRemove(UsrId);

    db.StoreProc<dynamic, dynamic>("Usr_Logout(@UTid)", new { UTid = UsrId });
    UsrId = 0;
    UsrTyp = "?";
    Usr = "";
    UsrAvatar = "";
    await PLS.SetAsync(Constants.BrowserUsrIdKey, UsrId);
    //NavigationManager.NavigateTo("");
    GoHome();
    StateHasChanged();
  }

  public async Task LoginOk(int usrId, string usrTyp, string usr, string avatar)
  {
    UsrId = usrId;
    UsrTyp = usrTyp;
    Usr = usr;
    UsrAvatar = avatar;
    await PLS.SetAsync(Constants.BrowserUsrIdKey, UsrId);
    //OnUsrChanged();
    UsrHub.UsrAdd(UsrId, Usr, UsrAvatar);
    GoHome();
    StateHasChanged();
  }

  public void Dispose()
  {
    UsrHub.UsrRemove(UsrId);
  }

}
