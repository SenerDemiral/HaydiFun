@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject IPubs pubs
@inject ISnackbar Snackbar

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
  <MudAppBar Elevation="0" Dense="true">
    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
    <MudSpacer />
    <MudTooltip Text="OnLine Üye Sayısı">
      <MudChip Color="Color.Info">@USP?.NOU</MudChip>
    </MudTooltip>
    @if (USP?.UsrId == 0)
    {
      <MudFab StartIcon="@Icons.Material.Filled.Login"
            Label="GİRİŞ"
            Color="Color.Error"
            Size="Size.Small"
            OnClick="@(() => DialogService.Show<LoginDialog>())" />
    }
    else
    {
      <MudTooltip Text="Güvenli Çıkış">
        <MudFab EndIcon="@Icons.Material.Filled.Logout"
              Label="@USP?.Usr"
              Color="Color.Error"
              Size="Size.Small"
              OnClick="Logout" />
      </MudTooltip>
    }
  </MudAppBar>
  <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
    <MudDrawerHeader>
      <MudText Typo="Typo.h6">HaydiFun</MudText>
    </MudDrawerHeader>
    <NavMenu />
  </MudDrawer>
  <MudMainContent>
    <MudContainer MaxWidth="MaxWidth.Large" Class="my-1 pt-1">
      @Body
    </MudContainer>
  </MudMainContent>
</MudLayout>

@code {
    [CascadingParameter] private UserStateProvider? USP { get; set; }

    bool _drawerOpen = true;
    string AdmMsg = "";

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private async Task Logout() => await USP.Logout();

    private void OnAdmMsgChanged(object sender, AdmMsgEventArgs e)
    {
        // Adminden Mesaj gonderilebilir Login olanlar icin event var ama olmayanlar icin bu var
        if (e.Who == "H" ||                         // Herkese
            e.Who == USP.UsrTyp ||             // Adm, Mgz, Tnt
            USP.UsrId == int.Parse(e.Who))     // Usr
        {
            Snackbar.Add(e.Msg, Severity.Error, config =>
            {
                config.RequireInteraction = true;
            });
        }
    }

    protected override void OnInitialized()
    {
        //pubs.AdmMsgChanged += OnAdmMsgChanged!;
    }

    //public void Dispose() => pubs.AdmMsgChanged -= OnAdmMsgChanged!;

}