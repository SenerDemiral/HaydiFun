@page "/etkhub"

@inject NavigationManager NavigationManager
@inject IPubs pubs
@inject EtkHub EtkHub
@inject UsrHub UsrHub
@implements IDisposable

<style>
    .ug {
        display: grid;
        grid-gap: 4px;
        grid-template-columns: 100px 50px 200px;
        background-color: burlywood;
        /*color: #444;*/
        justify-content: center;
        align-content: center;
        /*height: 100px;*/
        /*overflow: auto;*/
    }
    .G {
        background-color:aliceblue;
    }

    .O {
        background-color:bisque;
    }

    .tal {
        text-align: left;
    }

    .tac {
        text-align: center;
    }

    .tar {
        text-align: right;
    }

    table, th, td {
        border: 1px solid burlywood;
        border-collapse: collapse;
        padding: 0 4px;
    }
</style>

@*<div class="ug">
    <div>Usr</div>
    <div>Cnt</div>
    <div>InsTS</div>
    @foreach (var kv in UsrHub.Usrs)
    {
        <div>@kv.Value.UsrNN</div>
        <div>@kv.Value.Cnt</div>
        <div>@kv.Value.EXD</div>
    }

</div>*@
@if (USP.UsrId != 0)
{
    <div style="margin:auto; width: fit-content;">
        <table>
            <caption style="background-color: burlywood;">Etkinliklerim</caption>
            <colgroup>
                <col>
                <col>
                <col>
                <col style="width:50px">
                <col>
            </colgroup>
            <thead>
                <tr>
                    <th class="tal">ID</th>
                    <th>Typ</th>
                    <th>Owner</th>
                    <th>Avtr</th>
                    <th>Stu</th>
                </tr>
            </thead>
            <tbody>
                @{
                    int NOU = 0;
                    var usrId = USP.UsrId;
                    int etkId;
                    EtkHub.EtkMdl etk;
                }
                @{

                }
                @foreach(var e in EtkL)
                {
                    var o = UsrHub.UsrD[e.OwnId];
                    var oOnline = o.isOnline ? '✅' : ' ';

                    <tr @key="e.ETid" class="@e.Typ">
                        <td>@e.ETid</td>
                        <td class="tac">@e.TypAd</td>
                        <td><b>@o.Usr</b> @oOnline</td>
                        <td class="px-0"><img src="@o.ImgUrl" style="display:block" /></td>
                        <td class="tac">@e.MbrD[usrId]</td>
                    </tr>
                    <tr style="background-color: beige">
                        <td colspan="9">@e.Info</td>
                    </tr>
                    <tr style="background-color: beige">
                        <td colspan="9">@e.LblAds</td>
                    </tr>
                    NOU++;
                }

               @* @foreach (var kv in EtkHub.EtkD)
                {
                    etkId = kv.Key;
                    etk = kv.Value;

                    if (etk.MbrD.ContainsKey(usrId))
                    {
                        var ownId = etk.OwnId;
                        var own = UsrHub.UsrD[ownId];
                        var usr = UsrHub.UsrD[usrId];
                        char mbrStu = etk.MbrD[usrId];
                        var ownOnline = own.isOnline ? '✅' : ' ';

                        <tr @key="etkId" class="@etk.Typ">
                            <td>@etkId</td>
                            <td class="tac">@etk.TypAd</td>
                            <td><b>@own.Usr</b> @ownOnline</td>
                            <td class="px-0"><img src="@own.ImgUrl" style="display:block" /></td>
                            <td class="tac">@mbrStu</td>
                        </tr>
                        <tr style="background-color: beige">
                            <td colspan="9">@etk.Info</td>
                        </tr>
                        <tr style="background-color: beige">
                            <td colspan="9">@etk.LblAds</td>
                        </tr>
                        NOU++;
                    }
                }*@
            </tbody>
            <tfoot style="background-color: burlywood;">
                <tr>
                    <td class="tac">@NOU</td>
                    <td colspan="9"></td>
                </tr>
            </tfoot>
        </table>
    </div>
}

@code {
    [CascadingParameter] private UserStateProvider? USP { get; set; }
    Dictionary<int, DateTime> ETD = new();
    List<EtkHub.EtkMdl> EtkL = new();

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        //if (parameters.TryGetValue<UserStateProvider>(nameof(USP), out var value))
        //{
        //  if (value is null || value.UsrTyp != "A")
        //    NavigationManager.NavigateTo("");
        //  else
        //    await base.SetParametersAsync(parameters);  //Diger LifeCyle metodlarini cagiriyor
        //}
        await base.SetParametersAsync(parameters);  //Diger LifeCyle metodlarini cagiriyor
    }

    protected override void OnParametersSet()
    {
        //ETD.Clear();
        //hs.Clear();
        //foreach (var kv in EtkHub.EtkD)
        //{
        //    kv.Value
        //}


    }

    protected override void OnInitialized()
    {
        // Subscribe olmaya gerek yok. 
        // UsrHub.UsrD degistiginde USP(parent) degistigi icin burayi StateHasChanged yapiyor 
        // (StateHasChanged de OnParameterSet cagriliyor)
        // https://learn.microsoft.com/en-us/aspnet/core/blazor/components/lifecycle?view=aspnetcore-6.0#after-parameters-are-set-onparameterssetasync

        //pubs.AddDynEvent(Constants.UsrCntChange, UsrCntChange);

        // Igili Etkinlik degisimlerini dinlemek gerek cunki USP yi etkilemiyor
        EtkL = EtkHub.GetUsrEtks(USP.UsrId);
    }

    //public void UsrCntChange(dynamic d)
    //{
    //    InvokeAsync(StateHasChanged);
    //}

    public void Dispose()
    {
        //pubs.RemoveDynEvent(Constants.UsrCntChange, UsrCntChange);
    }

}
